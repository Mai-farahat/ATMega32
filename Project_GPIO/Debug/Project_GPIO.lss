
Project_GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000114  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000ba  00000220  2**0
                  ALLOC
  2 .bss          00000007  00800060  00800060  000003c0  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000000e  00000000  00000000  000003ef  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  000003fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000196d  00000000  00000000  00000515  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008db  00000000  00000000  00001e82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007c7  00000000  00000000  0000275d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c8  00000000  00000000  00002f24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001fd  00000000  00000000  000031ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008cb  00000000  00000000  000033e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00000296  00000296  000003aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.LCD_8_bit_sendCommand 00000030  000001de  000001de  000002f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.LCD_8_bit_init 0000002c  0000023e  0000023e  00000352  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.LCD_8_bit_sendChar 00000030  0000020e  0000020e  00000322  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.LCD_createCustomcharacter 00000036  000001a8  000001a8  000002bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.main    00000016  0000026a  0000026a  0000037e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .data.bell    00000008  00800067  000002a4  000003b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 21 .text.__vector_1 00000052  000000ba  000000ba  000001ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .bss.callbackptr 00000002  0080006f  0080006f  000003c0  2**0
                  ALLOC
 23 .text.__vector_11 0000004e  0000010c  0000010c  00000220  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__vector_10 0000004e  0000015a  0000015a  0000026e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.__dummy_fini 00000002  0000029e  0000029e  000003b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.__dummy_funcs_on_exit 00000002  000002a0  000002a0  000003b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__dummy_simulator_exit 00000002  000002a2  000002a2  000003b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.exit    00000016  00000280  00000280  00000394  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text._Exit   00000004  0000029a  0000029a  000003ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <_etext>
   8:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
   c:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
  10:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
  14:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
  18:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
  1c:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
  20:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
  24:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
  28:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__vector_10>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__vector_11>
  30:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
  34:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
  38:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
  3c:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
  40:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
  44:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
  48:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
  4c:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>
  50:	0c 94 4b 01 	jmp	0x296	; 0x296 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 67       	ori	r16, 0x70	; 112
  58:	80 00       	.word	0x0080	; ????
  5a:	67 00       	.word	0x0067	; ????
  5c:	6f 00       	.word	0x006f	; ????
  5e:	02 a4       	ldd	r0, Z+42	; 0x2a
  60:	00 6f       	ori	r16, 0xF0	; 240
  62:	00 71       	andi	r16, 0x10	; 16
  64:	80 00       	.word	0x0080	; ????

00000066 <__ctors_end>:
  66:	11 24       	eor	r1, r1
  68:	1f be       	out	0x3f, r1	; 63
  6a:	cf e5       	ldi	r28, 0x5F	; 95
  6c:	d8 e0       	ldi	r29, 0x08	; 8
  6e:	de bf       	out	0x3e, r29	; 62
  70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
  72:	e4 e5       	ldi	r30, 0x54	; 84
  74:	f0 e0       	ldi	r31, 0x00	; 0
  76:	40 e0       	ldi	r20, 0x00	; 0
  78:	17 c0       	rjmp	.+46     	; 0xa8 <__do_clear_bss+0x8>
  7a:	b5 91       	lpm	r27, Z+
  7c:	a5 91       	lpm	r26, Z+
  7e:	35 91       	lpm	r19, Z+
  80:	25 91       	lpm	r18, Z+
  82:	05 91       	lpm	r16, Z+
  84:	07 fd       	sbrc	r16, 7
  86:	0c c0       	rjmp	.+24     	; 0xa0 <__do_clear_bss>
  88:	95 91       	lpm	r25, Z+
  8a:	85 91       	lpm	r24, Z+
  8c:	ef 01       	movw	r28, r30
  8e:	f9 2f       	mov	r31, r25
  90:	e8 2f       	mov	r30, r24
  92:	05 90       	lpm	r0, Z+
  94:	0d 92       	st	X+, r0
  96:	a2 17       	cp	r26, r18
  98:	b3 07       	cpc	r27, r19
  9a:	d9 f7       	brne	.-10     	; 0x92 <__do_copy_data+0x20>
  9c:	fe 01       	movw	r30, r28
  9e:	04 c0       	rjmp	.+8      	; 0xa8 <__do_clear_bss+0x8>

000000a0 <__do_clear_bss>:
  a0:	1d 92       	st	X+, r1
  a2:	a2 17       	cp	r26, r18
  a4:	b3 07       	cpc	r27, r19
  a6:	e1 f7       	brne	.-8      	; 0xa0 <__do_clear_bss>
  a8:	e5 36       	cpi	r30, 0x65	; 101
  aa:	f4 07       	cpc	r31, r20
  ac:	31 f7       	brne	.-52     	; 0x7a <__do_copy_data+0x8>
  ae:	0e 94 35 01 	call	0x26a	; 0x26a <main>
  b2:	0c 94 40 01 	jmp	0x280	; 0x280 <exit>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>

Disassembly of section .text:

00000296 <__bad_interrupt>:
 296:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.LCD_8_bit_sendCommand:

000001de <LCD_8_bit_sendCommand>:
 * @retval		:none
 * @Note		:make RS pin low(command) , make RW pin low(write) , Generate high to low pulse (E)pin
 */
void LCD_8_bit_sendCommand(uint8_t cmnd)
{
	LCD_Data_Port = cmnd;
 1de:	88 bb       	out	0x18, r24	; 24
	CLEAR_func(LCD_Command_Port, RS);
 1e0:	8b b3       	in	r24, 0x1b	; 27
 1e2:	8f 7e       	andi	r24, 0xEF	; 239
 1e4:	8b bb       	out	0x1b, r24	; 27
	CLEAR_func(LCD_Command_Port,RW);
 1e6:	8b b3       	in	r24, 0x1b	; 27
 1e8:	8f 7d       	andi	r24, 0xDF	; 223
 1ea:	8b bb       	out	0x1b, r24	; 27
	SET_func(LCD_Command_Port, E);
 1ec:	8b b3       	in	r24, 0x1b	; 27
 1ee:	80 64       	ori	r24, 0x40	; 64
 1f0:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	8a 95       	dec	r24
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <LCD_8_bit_sendCommand+0x16>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <LCD_8_bit_sendCommand+0x1c>
	_delay_us(1);
	CLEAR_func(LCD_Command_Port,E);
 1fa:	8b b3       	in	r24, 0x1b	; 27
 1fc:	8f 7b       	andi	r24, 0xBF	; 191
 1fe:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 200:	8f e6       	ldi	r24, 0x6F	; 111
 202:	97 e1       	ldi	r25, 0x17	; 23
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <LCD_8_bit_sendCommand+0x26>
 208:	00 c0       	rjmp	.+0      	; 0x20a <LCD_8_bit_sendCommand+0x2c>
 20a:	00 00       	nop
 20c:	08 95       	ret

Disassembly of section .text.LCD_8_bit_init:

0000023e <LCD_8_bit_init>:
 * @retval		:none
 * @Note		:none
 */
void LCD_8_bit_init(void)
{
	LCD_Command_Dir = 0XFF; //Make LCD command port direction as o/p
 23e:	8f ef       	ldi	r24, 0xFF	; 255
 240:	8a bb       	out	0x1a, r24	; 26
	LCD_Data_Dir = 0XFF;    //Make LCD data port direction as o/p
 242:	87 bb       	out	0x17, r24	; 23
 244:	8f e3       	ldi	r24, 0x3F	; 63
 246:	9c e9       	ldi	r25, 0x9C	; 156
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <LCD_8_bit_init+0xa>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <LCD_8_bit_init+0x10>
 24e:	00 00       	nop
	
	_delay_ms(20);
	LCD_8_bit_sendCommand(LCD_8BIT_MODE_2LINES);
 250:	88 e3       	ldi	r24, 0x38	; 56
 252:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_8_bit_sendCommand>
	LCD_8_bit_sendCommand(LCD_DISP_ON_Cursor_OFF);
 256:	8c e0       	ldi	r24, 0x0C	; 12
 258:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_8_bit_sendCommand>
	LCD_8_bit_sendCommand(LCD_INC_CURSOR);
 25c:	86 e0       	ldi	r24, 0x06	; 6
 25e:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_8_bit_sendCommand>
	LCD_8_bit_sendCommand(LCD_CLEAR_SCREEN);	
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_8_bit_sendCommand>
 268:	08 95       	ret

Disassembly of section .text.LCD_8_bit_sendChar:

0000020e <LCD_8_bit_sendChar>:
 * @retval		:none
 * @Note		:make RS pin high(data register) , make RW pin low(write) , Generate high to low pulse (E)pin
 */
void LCD_8_bit_sendChar(uint8_t char_data)
{
	LCD_Data_Port = char_data;
 20e:	88 bb       	out	0x18, r24	; 24
	SET_func(LCD_Command_Port, RS);
 210:	8b b3       	in	r24, 0x1b	; 27
 212:	80 61       	ori	r24, 0x10	; 16
 214:	8b bb       	out	0x1b, r24	; 27
	CLEAR_func(LCD_Command_Port, RW);
 216:	8b b3       	in	r24, 0x1b	; 27
 218:	8f 7d       	andi	r24, 0xDF	; 223
 21a:	8b bb       	out	0x1b, r24	; 27
	SET_func(LCD_Command_Port, E);
 21c:	8b b3       	in	r24, 0x1b	; 27
 21e:	80 64       	ori	r24, 0x40	; 64
 220:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	8a 95       	dec	r24
 226:	f1 f7       	brne	.-4      	; 0x224 <LCD_8_bit_sendChar+0x16>
 228:	00 c0       	rjmp	.+0      	; 0x22a <LCD_8_bit_sendChar+0x1c>
	_delay_us(1);
	CLEAR_func(LCD_Command_Port, E);
 22a:	8b b3       	in	r24, 0x1b	; 27
 22c:	8f 7b       	andi	r24, 0xBF	; 191
 22e:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 230:	8f ec       	ldi	r24, 0xCF	; 207
 232:	97 e0       	ldi	r25, 0x07	; 7
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <LCD_8_bit_sendChar+0x26>
 238:	00 c0       	rjmp	.+0      	; 0x23a <LCD_8_bit_sendChar+0x2c>
 23a:	00 00       	nop
 23c:	08 95       	ret

Disassembly of section .text.LCD_createCustomcharacter:

000001a8 <LCD_createCustomcharacter>:
 */ 
#include "ECUAL/LCD/LCD.h"
// EXample
uint8_t bell[8] = {0x04, 0x0E, 0X0E, 0X0E, 0X1F, 0X00, 0X04, 0X00};
void LCD_createCustomcharacter(uint8_t *pattern, uint8_t location)
{
 1a8:	0f 93       	push	r16
 1aa:	1f 93       	push	r17
 1ac:	cf 93       	push	r28
 1ae:	8c 01       	movw	r16, r24
	uint8_t i = 0;
	LCD_8_bit_sendCommand(0X40 + (location * 8));
 1b0:	86 2f       	mov	r24, r22
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	08 96       	adiw	r24, 0x08	; 8
 1b6:	88 0f       	add	r24, r24
 1b8:	88 0f       	add	r24, r24
 1ba:	88 0f       	add	r24, r24
 1bc:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_8_bit_sendCommand>
	for(i = 0; i < 8; i++)
 1c0:	c0 e0       	ldi	r28, 0x00	; 0
 1c2:	07 c0       	rjmp	.+14     	; 0x1d2 <LCD_createCustomcharacter+0x2a>
	{
		LCD_8_bit_sendChar(pattern[i]);
 1c4:	f8 01       	movw	r30, r16
 1c6:	ec 0f       	add	r30, r28
 1c8:	f1 1d       	adc	r31, r1
 1ca:	80 81       	ld	r24, Z
 1cc:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_8_bit_sendChar>
uint8_t bell[8] = {0x04, 0x0E, 0X0E, 0X0E, 0X1F, 0X00, 0X04, 0X00};
void LCD_createCustomcharacter(uint8_t *pattern, uint8_t location)
{
	uint8_t i = 0;
	LCD_8_bit_sendCommand(0X40 + (location * 8));
	for(i = 0; i < 8; i++)
 1d0:	cf 5f       	subi	r28, 0xFF	; 255
 1d2:	c8 30       	cpi	r28, 0x08	; 8
 1d4:	b8 f3       	brcs	.-18     	; 0x1c4 <LCD_createCustomcharacter+0x1c>
	{
		LCD_8_bit_sendChar(pattern[i]);
	}
}
 1d6:	cf 91       	pop	r28
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	08 95       	ret

Disassembly of section .text.main:

0000026a <main>:
int main(void)
{
	LCD_8_bit_init();
 26a:	0e 94 1f 01 	call	0x23e	; 0x23e <LCD_8_bit_init>
	LCD_createCustomcharacter(bell , 0);
 26e:	60 e0       	ldi	r22, 0x00	; 0
 270:	87 e6       	ldi	r24, 0x67	; 103
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_createCustomcharacter>
	while(1){
		
		LCD_8_bit_sendChar(0);
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_8_bit_sendChar>
 27e:	fc cf       	rjmp	.-8      	; 0x278 <main+0xe>

Disassembly of section .text.__vector_1:

000000ba <__vector_1>:

void EXTI_SetCallBack(void(*FuncPtr)(void)){
	callbackptr = FuncPtr;
}
void __vector_1(void)__attribute__((signal,used));
void __vector_1(void){
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	2f 93       	push	r18
  c6:	3f 93       	push	r19
  c8:	4f 93       	push	r20
  ca:	5f 93       	push	r21
  cc:	6f 93       	push	r22
  ce:	7f 93       	push	r23
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
  d4:	af 93       	push	r26
  d6:	bf 93       	push	r27
  d8:	ef 93       	push	r30
  da:	ff 93       	push	r31
	if(callbackptr != NULL){
  dc:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <callbackptr>
  e0:	f0 91 70 00 	lds	r31, 0x0070	; 0x800070 <callbackptr+0x1>
  e4:	30 97       	sbiw	r30, 0x00	; 0
  e6:	09 f0       	breq	.+2      	; 0xea <__vector_1+0x30>
		callbackptr();
  e8:	09 95       	icall
	}
}
  ea:	ff 91       	pop	r31
  ec:	ef 91       	pop	r30
  ee:	bf 91       	pop	r27
  f0:	af 91       	pop	r26
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	7f 91       	pop	r23
  f8:	6f 91       	pop	r22
  fa:	5f 91       	pop	r21
  fc:	4f 91       	pop	r20
  fe:	3f 91       	pop	r19
 100:	2f 91       	pop	r18
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

Disassembly of section .text.__vector_11:

0000010c <__vector_11>:
	
	
	 
}
ISR(TIMER0_OVF_vect)
{
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
 116:	2f 93       	push	r18
 118:	3f 93       	push	r19
 11a:	4f 93       	push	r20
 11c:	5f 93       	push	r21
 11e:	6f 93       	push	r22
 120:	7f 93       	push	r23
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
 126:	af 93       	push	r26
 128:	bf 93       	push	r27
 12a:	ef 93       	push	r30
 12c:	ff 93       	push	r31
	GP_IRQ_CallBack();
 12e:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <GP_IRQ_CallBack>
 132:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <GP_IRQ_CallBack+0x1>
 136:	09 95       	icall
}
 138:	ff 91       	pop	r31
 13a:	ef 91       	pop	r30
 13c:	bf 91       	pop	r27
 13e:	af 91       	pop	r26
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	7f 91       	pop	r23
 146:	6f 91       	pop	r22
 148:	5f 91       	pop	r21
 14a:	4f 91       	pop	r20
 14c:	3f 91       	pop	r19
 14e:	2f 91       	pop	r18
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

Disassembly of section .text.__vector_10:

0000015a <__vector_10>:
ISR(TIMER0_COMP_vect)
{
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	2f 93       	push	r18
 166:	3f 93       	push	r19
 168:	4f 93       	push	r20
 16a:	5f 93       	push	r21
 16c:	6f 93       	push	r22
 16e:	7f 93       	push	r23
 170:	8f 93       	push	r24
 172:	9f 93       	push	r25
 174:	af 93       	push	r26
 176:	bf 93       	push	r27
 178:	ef 93       	push	r30
 17a:	ff 93       	push	r31
	GP_IRQ_CallBack();
 17c:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <GP_IRQ_CallBack>
 180:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <GP_IRQ_CallBack+0x1>
 184:	09 95       	icall
}
 186:	ff 91       	pop	r31
 188:	ef 91       	pop	r30
 18a:	bf 91       	pop	r27
 18c:	af 91       	pop	r26
 18e:	9f 91       	pop	r25
 190:	8f 91       	pop	r24
 192:	7f 91       	pop	r23
 194:	6f 91       	pop	r22
 196:	5f 91       	pop	r21
 198:	4f 91       	pop	r20
 19a:	3f 91       	pop	r19
 19c:	2f 91       	pop	r18
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

Disassembly of section .text.__dummy_fini:

0000029e <_fini>:
 29e:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000002a0 <__funcs_on_exit>:
 2a0:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000002a2 <__simulator_exit>:
 2a2:	08 95       	ret

Disassembly of section .text.exit:

00000280 <exit>:
 280:	ec 01       	movw	r28, r24
 282:	0e 94 50 01 	call	0x2a0	; 0x2a0 <__funcs_on_exit>
 286:	0e 94 4f 01 	call	0x29e	; 0x29e <_fini>
 28a:	ce 01       	movw	r24, r28
 28c:	0e 94 51 01 	call	0x2a2	; 0x2a2 <__simulator_exit>
 290:	ce 01       	movw	r24, r28
 292:	0e 94 4d 01 	call	0x29a	; 0x29a <_Exit>

Disassembly of section .text._Exit:

0000029a <_Exit>:
 29a:	0e 94 5b 00 	call	0xb6	; 0xb6 <_exit>
